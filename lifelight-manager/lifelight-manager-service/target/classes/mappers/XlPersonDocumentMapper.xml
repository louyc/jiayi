<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.lifelight.dubbo.dao.XlPersonDocumentMapper">
  <resultMap id="BaseResultMap" type="com.lifelight.api.entity.XlPersonDocument">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="manager_id" jdbcType="VARCHAR" property="managerId" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="sex" jdbcType="VARCHAR" property="sex" />
    <result column="card_type" jdbcType="VARCHAR" property="cardType" />
    <result column="card_num" jdbcType="VARCHAR" property="cardNum" />
    <result column="birthday" jdbcType="TIMESTAMP" property="birthday" />
    <result column="mobile" jdbcType="VARCHAR" property="mobile" />
    <result column="health_card" jdbcType="VARCHAR" property="healthCard" />
    <result column="document_id" jdbcType="VARCHAR" property="documentId" />
    <result column="new_farmers_card" jdbcType="VARCHAR" property="newFarmersCard" />
    <result column="medical_insurance_card" jdbcType="VARCHAR" property="medicalInsuranceCard" />
    <result column="residential_address" jdbcType="VARCHAR" property="residentialAddress" />
    <result column="permanent_address" jdbcType="VARCHAR" property="permanentAddress" />
    <result column="work_unit" jdbcType="VARCHAR" property="workUnit" />
    <result column="family_relations" jdbcType="VARCHAR" property="familyRelations" />
    <result column="contacts_name" jdbcType="VARCHAR" property="contactsName" />
    <result column="contacts_mobile" jdbcType="VARCHAR" property="contactsMobile" />
    <result column="living_state" jdbcType="VARCHAR" property="livingState" />
    <result column="living_type" jdbcType="VARCHAR" property="livingType" />
    <result column="registered_residence" jdbcType="VARCHAR" property="registeredResidence" />
    <result column="arrive_date" jdbcType="TIMESTAMP" property="arriveDate" />
    <result column="country" jdbcType="VARCHAR" property="country" />
    <result column="nation" jdbcType="VARCHAR" property="nation" />
    <result column="blood_type" jdbcType="VARCHAR" property="bloodType" />
    <result column="rh" jdbcType="VARCHAR" property="rh" />
    <result column="degree_education" jdbcType="VARCHAR" property="degreeEducation" />
    <result column="occupation" jdbcType="VARCHAR" property="occupation" />
    <result column="marriage_status" jdbcType="VARCHAR" property="marriageStatus" />
    <result column="date_marriage" jdbcType="TIMESTAMP" property="dateMarriage" />
    <result column="document_doctor" jdbcType="VARCHAR" property="documentDoctor" />
    <result column="document_date" jdbcType="TIMESTAMP" property="documentDate" />
    <result column="medical_costs" jdbcType="DOUBLE" property="medicalCosts" />
    <result column="medical_card_number" jdbcType="VARCHAR" property="medicalCardNumber" />
    <result column="low_insurance_car" jdbcType="VARCHAR" property="lowInsuranceCar" />
    <result column="drug_allergy_history" jdbcType="VARCHAR" property="drugAllergyHistory" />
    <result column="past_history" jdbcType="VARCHAR" property="pastHistory" />
    <result column="mother_medical_history" jdbcType="VARCHAR" property="motherMedicalHistory" />
    <result column="father_medical_history" jdbcType="VARCHAR" property="fatherMedicalHistory" />
    <result column="children_medical_history" jdbcType="VARCHAR" property="childrenMedicalHistory" />
    <result column="brother_medical_history" jdbcType="VARCHAR" property="brotherMedicalHistory" />
    <result column="heredity_history" jdbcType="VARCHAR" property="heredityHistory" />
    <result column="is_disability" jdbcType="VARCHAR" property="isDisability" />
    <result column="disability_card" jdbcType="VARCHAR" property="disabilityCard" />
    <result column="expose_history" jdbcType="VARCHAR" property="exposeHistory" />
    <result column="operation_history" jdbcType="VARCHAR" property="operationHistory" />
    <result column="trauma_history" jdbcType="VARCHAR" property="traumaHistory" />
    <result column="blood_transfusion_history" jdbcType="VARCHAR" property="bloodTransfusionHistory" />
    <result column="kitchen_exhaust" jdbcType="VARCHAR" property="kitchenExhaust" />
    <result column="fuel_type" jdbcType="VARCHAR" property="fuelType" />
    <result column="water" jdbcType="VARCHAR" property="water" />
    <result column="toilet" jdbcType="VARCHAR" property="toilet" />
    <result column="livestock" jdbcType="VARCHAR" property="livestock" />
    <result column="remarks" jdbcType="VARCHAR" property="remarks" />
    <result column="key_crowd_type" jdbcType="VARCHAR" property="keyCrowdType" />
    <result column="province_code" jdbcType="VARCHAR" property="provinceCode" />
    <result column="city_code" jdbcType="VARCHAR" property="cityCode" />
    <result column="town_code" jdbcType="VARCHAR" property="townCode" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="is_sign" jdbcType="VARCHAR" property="isSign" />
    <result column="variable" jdbcType="LONGVARCHAR" property="variable" />
    <result column="platform_id" jdbcType="VARCHAR" property="platformId" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    id, manager_id, name, sex, card_type, card_num, birthday, mobile, health_card, document_id, 
    new_farmers_card, medical_insurance_card, residential_address, permanent_address, 
    work_unit, family_relations, contacts_name, contacts_mobile, living_state, living_type, 
    registered_residence, arrive_date, country, nation, blood_type, rh, degree_education, 
    occupation, marriage_status, date_marriage, document_doctor, document_date, medical_costs, 
    medical_card_number, low_insurance_car, drug_allergy_history, past_history, mother_medical_history, 
    father_medical_history, children_medical_history, brother_medical_history, heredity_history, 
    is_disability, disability_card, expose_history, operation_history, trauma_history, 
    blood_transfusion_history, kitchen_exhaust, fuel_type, water, toilet, livestock, 
    remarks, key_crowd_type, province_code, city_code, town_code, create_time, update_time, 
    is_sign,variable,platform_id
  </sql>
  <select id="selectByExample" parameterType="com.lifelight.api.entity.XlPersonDocumentExample" resultMap="BaseResultMap">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from xl_person_document
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" 
  resultType="com.lifelight.api.vo.XlPersonDocumentVO">
    select 
     		pd.id, pd.manager_id as managerId, pd.name, pd.sex, pd.card_type as cardType, 
     		pd.card_num as cardNum, pd.birthday, pd.mobile, 
			pd.health_card as healthCard, pd.document_id as documentId, 
		    pd.new_farmers_card as newFarmersCard, pd.medical_insurance_card as medicalInsuranceCard, 
		    pd.residential_address as residentialAddress, pd.permanent_address as permanentAddress, 
		    pd.work_unit as workUnit, pd.family_relations as familyRelations, pd.contacts_name as contactsName
		    , pd.contacts_mobile as contactsMobile, pd.living_state as livingState, 
		    pd.living_type as livingType, 
		    pd.registered_residence as registeredResidence, pd.arrive_date as arriveDate, 
		    pd.country, pd.nation, pd.blood_type as bloodType, rh, pd.degree_education as degreeEducation, 
		    pd.occupation, pd.`marriage_status` marriageStatus, pd.date_marriage as dateMarriage, 
		    pd.document_doctor as documentDoctor,
		    pd.document_date as documentDate, pd.medical_costs as medicalCosts, 
		    pd.medical_card_number as medicalCardNumber, pd.low_insurance_car as lowInsuranceCar,
		    pd.drug_allergy_history as drugAllergyHistory, 
		    pd.past_history as pastHistory, pd.mother_medical_history as motherMedicalHistory, 
		    pd.father_medical_history as fatherMedicalHistory, pd.children_medical_history as childrenMedicalHistory
		    , pd.brother_medical_history as brotherMedicalHistory, pd.heredity_history as heredityHistory, 
		    pd.is_disability as isDisability, pd.disability_card as disabilityCard, pd.expose_history as exposeHistory
		    , pd.operation_history as operationHistory, pd.trauma_history as traumaHistory, 
		    pd.blood_transfusion_history as bloodTransfusionHistory, pd.kitchen_exhaust as kitchenExhaust, pd.fuel_type as fuelType, pd.water, pd.toilet, pd.livestock, 
		    pd.remarks, pd.key_crowd_type as keyCrowdType, pd.province_code as provinceCode, pd.city_code as cityCode
		    , pd.town_code as townCode, pd.create_time as createTime, 
		    pd.update_time as updateTime, 
		    pd.is_sign as isSign,da1.org_id as documentOrg
		    ,pd.variable,pd.platform_id,
		    CONCAT(ap.name,ac.name,at.name) as cityName,
		    da1.org_name as documentOrgName,bui.name as documentDoctorName
    from xl_person_document pd
    LEFT JOIN (SELECT r.`doctor_id`,r.`org_id`,b.`name` AS org_name FROM jy_org_doc_rel r 
			LEFT JOIN jy_sign_type_rel t ON r.id = t.`jy_rel_id`
			LEFT JOIN backstage_user_info b ON r.`org_id` = b.`manager_id`
			WHERE r.`sign_type` = 1 AND r.`in_use` =1 AND t.`jy_type` =1
		)da1 on pd.document_doctor = da1.doctor_id
	left join t_address_city ac on ac.code = pd.city_code
	left join backstage_user_info bui on bui.manager_id = pd.document_doctor
	left join t_address_province ap on ap.code =pd.province_code
	left join t_address_town at on at.code = pd.town_code
    where pd.id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    delete from xl_person_document
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.lifelight.api.entity.XlPersonDocumentExample">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    delete from xl_person_document
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.lifelight.api.entity.XlPersonDocument">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into xl_person_document (manager_id, name, sex, 
      card_type, card_num, birthday, 
      mobile, health_card, document_id, 
      new_farmers_card, medical_insurance_card, residential_address, 
      permanent_address, work_unit, family_relations, 
      contacts_name, contacts_mobile, living_state, 
      living_type, registered_residence, arrive_date, 
      country, nation, blood_type, 
      rh, degree_education, occupation, 
      marriage_status, date_marriage, document_doctor, 
      document_date, medical_costs, medical_card_number, 
      low_insurance_car, drug_allergy_history, past_history, 
      mother_medical_history, father_medical_history, 
      children_medical_history, brother_medical_history, 
      heredity_history, is_disability, disability_card, 
      expose_history, operation_history, trauma_history, 
      blood_transfusion_history, kitchen_exhaust, 
      fuel_type, water, toilet, 
      livestock, remarks, key_crowd_type, 
      province_code, city_code, town_code, 
      create_time, update_time, is_sign,variable,platform_id
      )
    values (#{managerId,jdbcType=VARCHAR}, #{name,jdbcType=VARCHAR}, #{sex,jdbcType=VARCHAR}, 
      #{cardType,jdbcType=VARCHAR}, #{cardNum,jdbcType=VARCHAR}, #{birthday,jdbcType=TIMESTAMP}, 
      #{mobile,jdbcType=VARCHAR}, #{healthCard,jdbcType=VARCHAR}, #{documentId,jdbcType=VARCHAR}, 
      #{newFarmersCard,jdbcType=VARCHAR}, #{medicalInsuranceCard,jdbcType=VARCHAR}, #{residentialAddress,jdbcType=VARCHAR}, 
      #{permanentAddress,jdbcType=VARCHAR}, #{workUnit,jdbcType=VARCHAR}, #{familyRelations,jdbcType=VARCHAR}, 
      #{contactsName,jdbcType=VARCHAR}, #{contactsMobile,jdbcType=VARCHAR}, #{livingState,jdbcType=VARCHAR}, 
      #{livingType,jdbcType=VARCHAR}, #{registeredResidence,jdbcType=VARCHAR}, #{arriveDate,jdbcType=TIMESTAMP}, 
      #{country,jdbcType=VARCHAR}, #{nation,jdbcType=VARCHAR}, #{bloodType,jdbcType=VARCHAR}, 
      #{rh,jdbcType=VARCHAR}, #{degreeEducation,jdbcType=VARCHAR}, #{occupation,jdbcType=VARCHAR}, 
      #{marriageStatus,jdbcType=VARCHAR}, #{dateMarriage,jdbcType=TIMESTAMP}, #{documentDoctor,jdbcType=VARCHAR}, 
      #{documentDate,jdbcType=TIMESTAMP}, #{medicalCosts,jdbcType=DOUBLE}, #{medicalCardNumber,jdbcType=VARCHAR}, 
      #{lowInsuranceCar,jdbcType=VARCHAR}, #{drugAllergyHistory,jdbcType=VARCHAR}, #{pastHistory,jdbcType=VARCHAR}, 
      #{motherMedicalHistory,jdbcType=VARCHAR}, #{fatherMedicalHistory,jdbcType=VARCHAR}, 
      #{childrenMedicalHistory,jdbcType=VARCHAR}, #{brotherMedicalHistory,jdbcType=VARCHAR}, 
      #{heredityHistory,jdbcType=VARCHAR}, #{isDisability,jdbcType=VARCHAR}, #{disabilityCard,jdbcType=VARCHAR}, 
      #{exposeHistory,jdbcType=VARCHAR}, #{operationHistory,jdbcType=VARCHAR}, #{traumaHistory,jdbcType=VARCHAR}, 
      #{bloodTransfusionHistory,jdbcType=VARCHAR}, #{kitchenExhaust,jdbcType=VARCHAR}, 
      #{fuelType,jdbcType=VARCHAR}, #{water,jdbcType=VARCHAR}, #{toilet,jdbcType=VARCHAR}, 
      #{livestock,jdbcType=VARCHAR}, #{remarks,jdbcType=VARCHAR}, #{keyCrowdType,jdbcType=VARCHAR}, 
      #{provinceCode,jdbcType=VARCHAR}, #{cityCode,jdbcType=VARCHAR}, #{townCode,jdbcType=VARCHAR}, 
      #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP},
       #{isSign,jdbcType=VARCHAR},
       #{variable,jdbcType=VARCHAR},
       #{platformId,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" useGeneratedKeys="true" keyProperty="id" parameterType="com.lifelight.api.entity.XlPersonDocument">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into xl_person_document
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="managerId != null and managerId !=''">
        manager_id,
      </if>
      <if test="name != null and name !=''">
        name,
      </if>
      <if test="sex != null and sex !=''">
        sex,
      </if>
      <if test="cardType != null and cardType !=''">
        card_type,
      </if>
      <if test="cardNum != null and cardNum !=''">
        card_num,
      </if>
      <if test="birthday != null and birthday !=''">
        birthday,
      </if>
      <if test="mobile != null and mobile !=''">
        mobile,
      </if>
      <if test="healthCard != null and healthCard !=''">
        health_card,
      </if>
      <if test="documentId != null and documentId !=''">
        document_id,
      </if>
      <if test="newFarmersCard != null and newFarmersCard !=''">
        new_farmers_card,
      </if>
      <if test="medicalInsuranceCard != null and medicalInsuranceCard !=''">
        medical_insurance_card,
      </if>
      <if test="residentialAddress != null and residentialAddress !=''">
        residential_address,
      </if>
      <if test="permanentAddress != null and permanentAddress !=''">
        permanent_address,
      </if>
      <if test="workUnit != null and workUnit !=''">
        work_unit,
      </if>
      <if test="familyRelations != null and familyRelations !=''">
        family_relations,
      </if>
      <if test="contactsName != null and  contactsName !=''">
        contacts_name,
      </if>
      <if test="contactsMobile != null and contactsMobile !=''">
        contacts_mobile,
      </if>
      <if test="livingState != null and livingState !=''">
        living_state,
      </if>
      <if test="livingType != null and livingType !=''">
        living_type,
      </if>
      <if test="registeredResidence != null and registeredResidence !=''">
        registered_residence,
      </if>
      <if test="arriveDate != null and arriveDate !=''">
        arrive_date,
      </if>
      <if test="country != null and country !=''">
        country,
      </if>
      <if test="nation != null and nation !=''">
        nation,
      </if>
      <if test="bloodType != null and bloodType !=''">
        blood_type,
      </if>
      <if test="rh != null and rh !=''">
        rh,
      </if>
      <if test="degreeEducation != null and  degreeEducation !=''">
        degree_education,
      </if>
      <if test="occupation != null and  occupation !=''">
        occupation,
      </if>
      <if test="marriageStatus != null and marriageStatus !=''">
        marriage_status,
      </if>
      <if test="dateMarriage != null and dateMarriage !=''">
        date_marriage,
      </if>
      <if test="documentDoctor != null and documentDoctor !=''">
        document_doctor,
      </if>
      <if test="documentDate != null and medicalCosts !=''">
        document_date,
      </if>
      <if test="medicalCosts != null and medicalCosts !=''">
        medical_costs,
      </if>
      <if test="medicalCardNumber != null and medicalCardNumber !=''">
        medical_card_number,
      </if>
      <if test="lowInsuranceCar != null and lowInsuranceCar !=''">
        low_insurance_car,
      </if>
      <if test="drugAllergyHistory != null and drugAllergyHistory !=''">
        drug_allergy_history,
      </if>
      <if test="pastHistory != null and pastHistory !=''">
        past_history,
      </if>
      <if test="motherMedicalHistory != null and motherMedicalHistory !=''">
        mother_medical_history,
      </if>
      <if test="fatherMedicalHistory != null and fatherMedicalHistory !=''">
        father_medical_history,
      </if>
      <if test="childrenMedicalHistory != null and childrenMedicalHistory !=''">
        children_medical_history,
      </if>
      <if test="brotherMedicalHistory != null and brotherMedicalHistory !=''">
        brother_medical_history,
      </if>
      <if test="heredityHistory != null and heredityHistory !=''">
        heredity_history,
      </if>
      <if test="isDisability != null and isDisability !=''">
        is_disability,
      </if>
      <if test="disabilityCard != null and disabilityCard !=''">
        disability_card,
      </if>
      <if test="exposeHistory != null and exposeHistory !=''">
        expose_history,
      </if>
      <if test="operationHistory != null and operationHistory !=''">
        operation_history,
      </if>
      <if test="traumaHistory != null and traumaHistory !=''">
        trauma_history,
      </if>
      <if test="bloodTransfusionHistory != null and bloodTransfusionHistory !=''">
        blood_transfusion_history,
      </if>
      <if test="kitchenExhaust != null and kitchenExhaust !=''">
        kitchen_exhaust,
      </if>
      <if test="fuelType != null and fuelType !=''">
        fuel_type,
      </if>
      <if test="water != null and water !=''">
        water,
      </if>
      <if test="toilet != null and toilet !=''">
        toilet,
      </if>
      <if test="livestock != null and livestock !=''">
        livestock,
      </if>
      <if test="remarks != null and remarks !=''">
        remarks,
      </if>
      <if test="keyCrowdType != null and keyCrowdType !=''">
        key_crowd_type,
      </if>
      <if test="provinceCode != null and provinceCode !=''">
        province_code,
      </if>
      <if test="cityCode != null and cityCode !=''">
        city_code,
      </if>
      <if test="townCode != null and townCode !=''">
        town_code,
      </if>
      <if test="createTime != null and createTime !=''">
        create_time,
      </if>
      <if test="updateTime != null and updateTime !=''">
        update_time,
      </if>
      <if test="isSign != null and isSign !=''">
        is_sign,
      </if>
      <if test="variable != null and variable !=''">
        variable,
      </if>
      <if test="platformId != null">
        platform_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="managerId != null and managerId !=''">
        #{managerId,jdbcType=VARCHAR},
      </if>
      <if test="name != null and name !=''">
        REPLACE(#{name,jdbcType=VARCHAR},' ',''), 
      </if>
      <if test="sex != null and sex !=''">
        #{sex,jdbcType=VARCHAR},
      </if>
      <if test="cardType != null and cardType !=''">
        #{cardType,jdbcType=VARCHAR},
      </if>
      <if test="cardNum != null and cardNum !=''">
        #{cardNum,jdbcType=VARCHAR},
      </if>
      <if test="birthday != null and birthday !=''">
        #{birthday,jdbcType=TIMESTAMP},
      </if>
      <if test="mobile != null and mobile !=''">
        #{mobile,jdbcType=VARCHAR},
      </if>
      <if test="healthCard != null and healthCard !=''">
        #{healthCard,jdbcType=VARCHAR},
      </if>
      <if test="documentId != null and documentId !=''">
        #{documentId,jdbcType=VARCHAR},
      </if>
      <if test="newFarmersCard != null and newFarmersCard !=''">
        #{newFarmersCard,jdbcType=VARCHAR},
      </if>
      <if test="medicalInsuranceCard != null and medicalInsuranceCard !=''">
        #{medicalInsuranceCard,jdbcType=VARCHAR},
      </if>
      <if test="residentialAddress != null and residentialAddress !=''">
        REPLACE(#{residentialAddress,jdbcType=VARCHAR},' ',''), 
      </if>
      <if test="permanentAddress != null and permanentAddress !=''">
        REPLACE(#{permanentAddress,jdbcType=VARCHAR},' ',''), 
      </if>
      <if test="workUnit != null and workUnit !=''">
        #{workUnit,jdbcType=VARCHAR},
      </if>
      <if test="familyRelations != null and familyRelations !=''">
        #{familyRelations,jdbcType=VARCHAR},
      </if>
      <if test="contactsName != null and contactsName !=''">
        #{contactsName,jdbcType=VARCHAR},
      </if>
      <if test="contactsMobile != null and contactsMobile !=''">
        #{contactsMobile,jdbcType=VARCHAR},
      </if>
      <if test="livingState != null and livingState !=''">
        #{livingState,jdbcType=VARCHAR},
      </if>
      <if test="livingType != null and livingType !=''">
        #{livingType,jdbcType=VARCHAR},
      </if>
      <if test="registeredResidence != null and registeredResidence !=''">
        #{registeredResidence,jdbcType=VARCHAR},
      </if>
      <if test="arriveDate != null and arriveDate !=''">
        #{arriveDate,jdbcType=TIMESTAMP},
      </if>
      <if test="country != null and country !=''">
        #{country,jdbcType=VARCHAR},
      </if>
      <if test="nation != null and nation !=''">
        #{nation,jdbcType=VARCHAR},
      </if>
      <if test="bloodType != null and bloodType !=''">
        #{bloodType,jdbcType=VARCHAR},
      </if>
      <if test="rh != null and rh !=''">
        #{rh,jdbcType=VARCHAR},
      </if>
      <if test="degreeEducation != null and degreeEducation !=''">
        #{degreeEducation,jdbcType=VARCHAR},
      </if>
      <if test="occupation != null and occupation !=''">
        #{occupation,jdbcType=VARCHAR},
      </if>
      <if test="marriageStatus != null and marriageStatus !=''">
        #{marriageStatus,jdbcType=VARCHAR},
      </if>
      <if test="dateMarriage != null and dateMarriage !=''">
        #{dateMarriage,jdbcType=TIMESTAMP},
      </if>
      <if test="documentDoctor != null and documentDoctor !=''">
        #{documentDoctor,jdbcType=VARCHAR},
      </if>
      <if test="documentDate != null and documentDate !=''">
        #{documentDate,jdbcType=TIMESTAMP},
      </if>
      <if test="medicalCosts != null and medicalCosts !=''">
        #{medicalCosts,jdbcType=DOUBLE},
      </if>
      <if test="medicalCardNumber != null and medicalCardNumber !=''">
        #{medicalCardNumber,jdbcType=VARCHAR},
      </if>
      <if test="lowInsuranceCar != null and lowInsuranceCar !=''">
        #{lowInsuranceCar,jdbcType=VARCHAR},
      </if>
      <if test="drugAllergyHistory != null and drugAllergyHistory !=''">
        #{drugAllergyHistory,jdbcType=VARCHAR},
      </if>
      <if test="pastHistory != null and pastHistory !=''">
        #{pastHistory,jdbcType=VARCHAR},
      </if>
      <if test="motherMedicalHistory != null and  motherMedicalHistory !=''">
        #{motherMedicalHistory,jdbcType=VARCHAR},
      </if>
      <if test="fatherMedicalHistory != null and fatherMedicalHistory !=''">
        #{fatherMedicalHistory,jdbcType=VARCHAR},
      </if>
      <if test="childrenMedicalHistory != null and childrenMedicalHistory !=''">
        #{childrenMedicalHistory,jdbcType=VARCHAR},
      </if>
      <if test="brotherMedicalHistory != null and brotherMedicalHistory !=''">
        #{brotherMedicalHistory,jdbcType=VARCHAR},
      </if>
      <if test="heredityHistory != null and heredityHistory !=''">
        #{heredityHistory,jdbcType=VARCHAR},
      </if>
      <if test="isDisability != null and isDisability !=''">
        #{isDisability,jdbcType=VARCHAR},
      </if>
      <if test="disabilityCard != null and disabilityCard !=''">
        #{disabilityCard,jdbcType=VARCHAR},
      </if>
      <if test="exposeHistory != null and exposeHistory   !=''">
        #{exposeHistory,jdbcType=VARCHAR},
      </if>
      <if test="operationHistory != null and  operationHistory !=''">
        #{operationHistory,jdbcType=VARCHAR},
      </if>
      <if test="traumaHistory != null and traumaHistory !=''">
        #{traumaHistory,jdbcType=VARCHAR},
      </if>
      <if test="bloodTransfusionHistory != null and bloodTransfusionHistory !=''">
        #{bloodTransfusionHistory,jdbcType=VARCHAR},
      </if>
      <if test="kitchenExhaust != null and kitchenExhaust !=''">
        #{kitchenExhaust,jdbcType=VARCHAR},
      </if>
      <if test="fuelType != null and fuelType !=''">
        #{fuelType,jdbcType=VARCHAR},
      </if>
      <if test="water != null and water !=''">
        #{water,jdbcType=VARCHAR},
      </if>
      <if test="toilet != null and toilet !=''">
        #{toilet,jdbcType=VARCHAR},
      </if>
      <if test="livestock != null and livestock !=''">
        #{livestock,jdbcType=VARCHAR},
      </if>
      <if test="remarks != null and remarks !=''">
        #{remarks,jdbcType=VARCHAR},
      </if>
      <if test="keyCrowdType != null and keyCrowdType !=''">
        #{keyCrowdType,jdbcType=VARCHAR},
      </if>
      <if test="provinceCode != null and provinceCode !=''">
        #{provinceCode,jdbcType=VARCHAR},
      </if>
      <if test="cityCode != null and cityCode !=''">
        #{cityCode,jdbcType=VARCHAR},
      </if>
      <if test="townCode != null and townCode !=''">
        #{townCode,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null and  createTime !=''">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null and updateTime !=''">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="isSign != null and isSign !=''">
        #{isSign,jdbcType=VARCHAR},
      </if>
      <if test="variable != null and variable !=''">
        #{variable,jdbcType=VARCHAR},
      </if>
      <if test="platformId != null">
        #{platformId,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.lifelight.api.entity.XlPersonDocumentExample" resultType="java.lang.Long">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select count(*) from xl_person_document
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update xl_person_document
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.managerId != null">
        manager_id = #{record.managerId,jdbcType=VARCHAR},
      </if>
      <if test="record.name != null">
        name = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.sex != null">
        sex = #{record.sex,jdbcType=VARCHAR},
      </if>
      <if test="record.cardType != null">
        card_type = #{record.cardType,jdbcType=VARCHAR},
      </if>
      <if test="record.cardNum != null">
        card_num = #{record.cardNum,jdbcType=VARCHAR},
      </if>
      <if test="record.birthday != null">
        birthday = #{record.birthday,jdbcType=TIMESTAMP},
      </if>
      <if test="record.mobile != null">
        mobile = #{record.mobile,jdbcType=VARCHAR},
      </if>
      <if test="record.healthCard != null">
        health_card = #{record.healthCard,jdbcType=VARCHAR},
      </if>
      <if test="record.documentId != null">
        document_id = #{record.documentId,jdbcType=VARCHAR},
      </if>
      <if test="record.newFarmersCard != null">
        new_farmers_card = #{record.newFarmersCard,jdbcType=VARCHAR},
      </if>
      <if test="record.medicalInsuranceCard != null">
        medical_insurance_card = #{record.medicalInsuranceCard,jdbcType=VARCHAR},
      </if>
      <if test="record.residentialAddress != null">
        residential_address = #{record.residentialAddress,jdbcType=VARCHAR},
      </if>
      <if test="record.permanentAddress != null">
        permanent_address = #{record.permanentAddress,jdbcType=VARCHAR},
      </if>
      <if test="record.workUnit != null">
        work_unit = #{record.workUnit,jdbcType=VARCHAR},
      </if>
      <if test="record.familyRelations != null">
        family_relations = #{record.familyRelations,jdbcType=VARCHAR},
      </if>
      <if test="record.contactsName != null">
        contacts_name = #{record.contactsName,jdbcType=VARCHAR},
      </if>
      <if test="record.contactsMobile != null">
        contacts_mobile = #{record.contactsMobile,jdbcType=VARCHAR},
      </if>
      <if test="record.livingState != null">
        living_state = #{record.livingState,jdbcType=VARCHAR},
      </if>
      <if test="record.livingType != null">
        living_type = #{record.livingType,jdbcType=VARCHAR},
      </if>
      <if test="record.registeredResidence != null">
        registered_residence = #{record.registeredResidence,jdbcType=VARCHAR},
      </if>
      <if test="record.arriveDate != null">
        arrive_date = #{record.arriveDate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.country != null">
        country = #{record.country,jdbcType=VARCHAR},
      </if>
      <if test="record.nation != null">
        nation = #{record.nation,jdbcType=VARCHAR},
      </if>
      <if test="record.bloodType != null">
        blood_type = #{record.bloodType,jdbcType=VARCHAR},
      </if>
      <if test="record.rh != null">
        rh = #{record.rh,jdbcType=VARCHAR},
      </if>
      <if test="record.degreeEducation != null">
        degree_education = #{record.degreeEducation,jdbcType=VARCHAR},
      </if>
      <if test="record.occupation != null">
        occupation = #{record.occupation,jdbcType=VARCHAR},
      </if>
      <if test="record.marriageStatus != null">
        marriage_status = #{record.marriageStatus,jdbcType=VARCHAR},
      </if>
      <if test="record.dateMarriage != null">
        date_marriage = #{record.dateMarriage,jdbcType=TIMESTAMP},
      </if>
      <if test="record.documentDoctor != null">
        document_doctor = #{record.documentDoctor,jdbcType=VARCHAR},
      </if>
      <if test="record.documentDate != null">
        document_date = #{record.documentDate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.medicalCosts != null">
        medical_costs = #{record.medicalCosts,jdbcType=DOUBLE},
      </if>
      <if test="record.medicalCardNumber != null">
        medical_card_number = #{record.medicalCardNumber,jdbcType=VARCHAR},
      </if>
      <if test="record.lowInsuranceCar != null">
        low_insurance_car = #{record.lowInsuranceCar,jdbcType=VARCHAR},
      </if>
      <if test="record.drugAllergyHistory != null">
        drug_allergy_history = #{record.drugAllergyHistory,jdbcType=VARCHAR},
      </if>
      <if test="record.pastHistory != null">
        past_history = #{record.pastHistory,jdbcType=VARCHAR},
      </if>
      <if test="record.motherMedicalHistory != null">
        mother_medical_history = #{record.motherMedicalHistory,jdbcType=VARCHAR},
      </if>
      <if test="record.fatherMedicalHistory != null">
        father_medical_history = #{record.fatherMedicalHistory,jdbcType=VARCHAR},
      </if>
      <if test="record.childrenMedicalHistory != null">
        children_medical_history = #{record.childrenMedicalHistory,jdbcType=VARCHAR},
      </if>
      <if test="record.brotherMedicalHistory != null">
        brother_medical_history = #{record.brotherMedicalHistory,jdbcType=VARCHAR},
      </if>
      <if test="record.heredityHistory != null">
        heredity_history = #{record.heredityHistory,jdbcType=VARCHAR},
      </if>
      <if test="record.isDisability != null">
        is_disability = #{record.isDisability,jdbcType=VARCHAR},
      </if>
      <if test="record.disabilityCard != null">
        disability_card = #{record.disabilityCard,jdbcType=VARCHAR},
      </if>
      <if test="record.exposeHistory != null">
        expose_history = #{record.exposeHistory,jdbcType=VARCHAR},
      </if>
      <if test="record.operationHistory != null">
        operation_history = #{record.operationHistory,jdbcType=VARCHAR},
      </if>
      <if test="record.traumaHistory != null">
        trauma_history = #{record.traumaHistory,jdbcType=VARCHAR},
      </if>
      <if test="record.bloodTransfusionHistory != null">
        blood_transfusion_history = #{record.bloodTransfusionHistory,jdbcType=VARCHAR},
      </if>
      <if test="record.kitchenExhaust != null">
        kitchen_exhaust = #{record.kitchenExhaust,jdbcType=VARCHAR},
      </if>
      <if test="record.fuelType != null">
        fuel_type = #{record.fuelType,jdbcType=VARCHAR},
      </if>
      <if test="record.water != null">
        water = #{record.water,jdbcType=VARCHAR},
      </if>
      <if test="record.toilet != null">
        toilet = #{record.toilet,jdbcType=VARCHAR},
      </if>
      <if test="record.livestock != null">
        livestock = #{record.livestock,jdbcType=VARCHAR},
      </if>
      <if test="record.remarks != null">
        remarks = #{record.remarks,jdbcType=VARCHAR},
      </if>
      <if test="record.keyCrowdType != null">
        key_crowd_type = #{record.keyCrowdType,jdbcType=VARCHAR},
      </if>
      <if test="record.provinceCode != null">
        province_code = #{record.provinceCode,jdbcType=VARCHAR},
      </if>
      <if test="record.cityCode != null">
        city_code = #{record.cityCode,jdbcType=VARCHAR},
      </if>
      <if test="record.townCode != null">
        town_code = #{record.townCode,jdbcType=VARCHAR},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateTime != null">
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.isSign != null">
        is_sign = #{record.isSign,jdbcType=VARCHAR},
      </if>
      <if test="record.variable != null">
        is_sign = #{record.variable,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update xl_person_document
    set id = #{record.id,jdbcType=INTEGER},
      manager_id = #{record.managerId,jdbcType=VARCHAR},
      name = #{record.name,jdbcType=VARCHAR},
      sex = #{record.sex,jdbcType=VARCHAR},
      card_type = #{record.cardType,jdbcType=VARCHAR},
      card_num = #{record.cardNum,jdbcType=VARCHAR},
      birthday = #{record.birthday,jdbcType=TIMESTAMP},
      mobile = #{record.mobile,jdbcType=VARCHAR},
      health_card = #{record.healthCard,jdbcType=VARCHAR},
      document_id = #{record.documentId,jdbcType=VARCHAR},
      new_farmers_card = #{record.newFarmersCard,jdbcType=VARCHAR},
      medical_insurance_card = #{record.medicalInsuranceCard,jdbcType=VARCHAR},
      residential_address = #{record.residentialAddress,jdbcType=VARCHAR},
      permanent_address = #{record.permanentAddress,jdbcType=VARCHAR},
      work_unit = #{record.workUnit,jdbcType=VARCHAR},
      family_relations = #{record.familyRelations,jdbcType=VARCHAR},
      contacts_name = #{record.contactsName,jdbcType=VARCHAR},
      contacts_mobile = #{record.contactsMobile,jdbcType=VARCHAR},
      living_state = #{record.livingState,jdbcType=VARCHAR},
      living_type = #{record.livingType,jdbcType=VARCHAR},
      registered_residence = #{record.registeredResidence,jdbcType=VARCHAR},
      arrive_date = #{record.arriveDate,jdbcType=TIMESTAMP},
      country = #{record.country,jdbcType=VARCHAR},
      nation = #{record.nation,jdbcType=VARCHAR},
      blood_type = #{record.bloodType,jdbcType=VARCHAR},
      rh = #{record.rh,jdbcType=VARCHAR},
      degree_education = #{record.degreeEducation,jdbcType=VARCHAR},
      occupation = #{record.occupation,jdbcType=VARCHAR},
      marriage_status = #{record.marriageStatus,jdbcType=VARCHAR},
      date_marriage = #{record.dateMarriage,jdbcType=TIMESTAMP},
      document_doctor = #{record.documentDoctor,jdbcType=VARCHAR},
      document_date = #{record.documentDate,jdbcType=TIMESTAMP},
      medical_costs = #{record.medicalCosts,jdbcType=DOUBLE},
      medical_card_number = #{record.medicalCardNumber,jdbcType=VARCHAR},
      low_insurance_car = #{record.lowInsuranceCar,jdbcType=VARCHAR},
      drug_allergy_history = #{record.drugAllergyHistory,jdbcType=VARCHAR},
      past_history = #{record.pastHistory,jdbcType=VARCHAR},
      mother_medical_history = #{record.motherMedicalHistory,jdbcType=VARCHAR},
      father_medical_history = #{record.fatherMedicalHistory,jdbcType=VARCHAR},
      children_medical_history = #{record.childrenMedicalHistory,jdbcType=VARCHAR},
      brother_medical_history = #{record.brotherMedicalHistory,jdbcType=VARCHAR},
      heredity_history = #{record.heredityHistory,jdbcType=VARCHAR},
      is_disability = #{record.isDisability,jdbcType=VARCHAR},
      disability_card = #{record.disabilityCard,jdbcType=VARCHAR},
      expose_history = #{record.exposeHistory,jdbcType=VARCHAR},
      operation_history = #{record.operationHistory,jdbcType=VARCHAR},
      trauma_history = #{record.traumaHistory,jdbcType=VARCHAR},
      blood_transfusion_history = #{record.bloodTransfusionHistory,jdbcType=VARCHAR},
      kitchen_exhaust = #{record.kitchenExhaust,jdbcType=VARCHAR},
      fuel_type = #{record.fuelType,jdbcType=VARCHAR},
      water = #{record.water,jdbcType=VARCHAR},
      toilet = #{record.toilet,jdbcType=VARCHAR},
      livestock = #{record.livestock,jdbcType=VARCHAR},
      remarks = #{record.remarks,jdbcType=VARCHAR},
      key_crowd_type = #{record.keyCrowdType,jdbcType=VARCHAR},
      province_code = #{record.provinceCode,jdbcType=VARCHAR},
      city_code = #{record.cityCode,jdbcType=VARCHAR},
      town_code = #{record.townCode,jdbcType=VARCHAR},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      is_sign = #{record.isSign,jdbcType=VARCHAR},
      variable = #{record.variable,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.lifelight.api.entity.XlPersonDocument">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update xl_person_document
    <set>
      <if test="managerId != null and managerId !=''">
        manager_id = #{managerId,jdbcType=VARCHAR},
      </if>
      <if test="name != null and name !=''">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="sex != null and sex !=''">
        sex = #{sex,jdbcType=VARCHAR},
      </if>
      <if test="cardType != null and cardType !=''">
        card_type = #{cardType,jdbcType=VARCHAR},
      </if>
      <if test="cardNum != null and cardNum !=''">
        card_num = #{cardNum,jdbcType=VARCHAR},
      </if>
      <if test="birthday != null and birthday !=''">
        birthday = #{birthday,jdbcType=TIMESTAMP},
      </if>
      <if test="mobile != null and mobile !=''">
        mobile = #{mobile,jdbcType=VARCHAR},
      </if>
      <if test="healthCard != null and healthCard !=''">
        health_card = #{healthCard,jdbcType=VARCHAR},
      </if>
      <if test="documentId != null and documentId !=''">
        document_id = #{documentId,jdbcType=VARCHAR},
      </if>
      <if test="newFarmersCard != null and newFarmersCard !=''">
        new_farmers_card = #{newFarmersCard,jdbcType=VARCHAR},
      </if>
      <if test="medicalInsuranceCard != null and medicalInsuranceCard !='' ">
        medical_insurance_card = #{medicalInsuranceCard,jdbcType=VARCHAR},
      </if>
      <if test="residentialAddress != null and residentialAddress !=''">
        residential_address = #{residentialAddress,jdbcType=VARCHAR},
      </if>
      <if test="permanentAddress != null and  permanentAddress !=''">
        permanent_address = #{permanentAddress,jdbcType=VARCHAR},
      </if>
      <if test="workUnit != null and  workUnit !=''">
        work_unit = #{workUnit,jdbcType=VARCHAR},
      </if>
      <if test="familyRelations != null and  familyRelations !=''">
        family_relations = #{familyRelations,jdbcType=VARCHAR},
      </if>
      <if test="contactsName != null and contactsName  !=''">
        contacts_name = #{contactsName,jdbcType=VARCHAR},
      </if>
      <if test="contactsMobile != null and  contactsMobile !=''">
        contacts_mobile = #{contactsMobile,jdbcType=VARCHAR},
      </if>
      <if test="livingState != null and  livingState !=''">
        living_state = #{livingState,jdbcType=VARCHAR},
      </if>
      <if test="livingType != null and livingType  !=''">
        living_type = #{livingType,jdbcType=VARCHAR},
      </if>
      <if test="registeredResidence != null and  registeredResidence !=''">
        registered_residence = #{registeredResidence,jdbcType=VARCHAR},
      </if>
      <if test="arriveDate != null and arriveDate  !=''">
        arrive_date = #{arriveDate,jdbcType=TIMESTAMP},
      </if>
      <if test="country != null and  country !=''">
        country = #{country,jdbcType=VARCHAR},
      </if>
      <if test="nation != null and nation  !=''">
        nation = #{nation,jdbcType=VARCHAR},
      </if>
      <if test="bloodType != null and bloodType  !=''">
        blood_type = #{bloodType,jdbcType=VARCHAR},
      </if>
      <if test="rh != null and rh  !=''">
        rh = #{rh,jdbcType=VARCHAR},
      </if>
      <if test="degreeEducation != null and degreeEducation  !=''">
        degree_education = #{degreeEducation,jdbcType=VARCHAR},
      </if>
      <if test="occupation != null and occupation  !=''">
        occupation = #{occupation,jdbcType=VARCHAR},
      </if>
      <if test="marriageStatus != null and  marriageStatus !=''">
        marriage_status = #{marriageStatus,jdbcType=VARCHAR},
      </if>
      <if test="dateMarriage != null and dateMarriage  !=''">
        date_marriage = #{dateMarriage,jdbcType=TIMESTAMP},
      </if>
      <if test="documentDoctor != null and documentDoctor  !=''">
        document_doctor = #{documentDoctor,jdbcType=VARCHAR},
      </if>
      <if test="documentDate != null and documentDate  !=''">
        document_date = #{documentDate,jdbcType=TIMESTAMP},
      </if>
      <if test="medicalCosts != null and medicalCosts  !=''">
        medical_costs = #{medicalCosts,jdbcType=DOUBLE},
      </if>
      <if test="medicalCardNumber != null and medicalCardNumber  !=''">
        medical_card_number = #{medicalCardNumber,jdbcType=VARCHAR},
      </if>
      <if test="lowInsuranceCar != null and  lowInsuranceCar !=''">
        low_insurance_car = #{lowInsuranceCar,jdbcType=VARCHAR},
      </if>
      <if test="drugAllergyHistory != null and  drugAllergyHistory !=''">
        drug_allergy_history = #{drugAllergyHistory,jdbcType=VARCHAR},
      </if>
      <if test="pastHistory != null and pastHistory  !=''">
        past_history = #{pastHistory,jdbcType=VARCHAR},
      </if>
      <if test="motherMedicalHistory != null and motherMedicalHistory  !=''">
        mother_medical_history = #{motherMedicalHistory,jdbcType=VARCHAR},
      </if>
      <if test="fatherMedicalHistory != null and fatherMedicalHistory  !=''">
        father_medical_history = #{fatherMedicalHistory,jdbcType=VARCHAR},
      </if>
      <if test="childrenMedicalHistory != null and childrenMedicalHistory  !=''">
        children_medical_history = #{childrenMedicalHistory,jdbcType=VARCHAR},
      </if>
      <if test="brotherMedicalHistory != null and  brotherMedicalHistory !=''">
        brother_medical_history = #{brotherMedicalHistory,jdbcType=VARCHAR},
      </if>
      <if test="heredityHistory != null and  heredityHistory !=''">
        heredity_history = #{heredityHistory,jdbcType=VARCHAR},
      </if>
      <if test="isDisability != null and  isDisability !=''">
        is_disability = #{isDisability,jdbcType=VARCHAR},
      </if>
      <if test="disabilityCard != null and  disabilityCard !=''">
        disability_card = #{disabilityCard,jdbcType=VARCHAR},
      </if>
      <if test="exposeHistory != null and  exposeHistory !=''">
        expose_history = #{exposeHistory,jdbcType=VARCHAR},
      </if>
      <if test="operationHistory != null">
        operation_history = #{operationHistory,jdbcType=VARCHAR},
      </if>
      <if test="traumaHistory != null">
        trauma_history = #{traumaHistory,jdbcType=VARCHAR},
      </if>
      <if test="bloodTransfusionHistory != null">
        blood_transfusion_history = #{bloodTransfusionHistory,jdbcType=VARCHAR},
      </if>
      <if test="kitchenExhaust != null and kitchenExhaust  !=''">
        kitchen_exhaust = #{kitchenExhaust,jdbcType=VARCHAR},
      </if>
      <if test="fuelType != null and  fuelType !=''">
        fuel_type = #{fuelType,jdbcType=VARCHAR},
      </if>
      <if test="water != null and water  !=''">
        water = #{water,jdbcType=VARCHAR},
      </if>
      <if test="toilet != null and toilet  !=''">
        toilet = #{toilet,jdbcType=VARCHAR},
      </if>
      <if test="livestock != null and  livestock !=''">
        livestock = #{livestock,jdbcType=VARCHAR},
      </if>
      <if test="remarks != null and  remarks !=''">
        remarks = #{remarks,jdbcType=VARCHAR},
      </if>
      <if test="keyCrowdType != null">
        key_crowd_type = #{keyCrowdType,jdbcType=VARCHAR},
      </if>
      <if test="provinceCode != null and provinceCode  !=''">
        province_code = #{provinceCode,jdbcType=VARCHAR},
      </if>
      <if test="cityCode != null and  cityCode !=''">
        city_code = #{cityCode,jdbcType=VARCHAR},
      </if>
      <if test="townCode != null and  townCode !=''">
        town_code = #{townCode,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null and createTime  !=''">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null and updateTime  !=''">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="isSign != null and  isSign !=''">
        is_sign = #{isSign,jdbcType=VARCHAR},
      </if>
      <if test="variable != null and  variable !=''">
        variable = #{variable,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.lifelight.api.entity.XlPersonDocument">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update xl_person_document
    set manager_id = #{managerId,jdbcType=VARCHAR},
      name = #{name,jdbcType=VARCHAR},
      sex = #{sex,jdbcType=VARCHAR},
      card_type = #{cardType,jdbcType=VARCHAR},
      card_num = #{cardNum,jdbcType=VARCHAR},
      birthday = #{birthday,jdbcType=TIMESTAMP},
      mobile = #{mobile,jdbcType=VARCHAR},
      health_card = #{healthCard,jdbcType=VARCHAR},
      document_id = #{documentId,jdbcType=VARCHAR},
      new_farmers_card = #{newFarmersCard,jdbcType=VARCHAR},
      medical_insurance_card = #{medicalInsuranceCard,jdbcType=VARCHAR},
      residential_address = #{residentialAddress,jdbcType=VARCHAR},
      permanent_address = #{permanentAddress,jdbcType=VARCHAR},
      work_unit = #{workUnit,jdbcType=VARCHAR},
      family_relations = #{familyRelations,jdbcType=VARCHAR},
      contacts_name = #{contactsName,jdbcType=VARCHAR},
      contacts_mobile = #{contactsMobile,jdbcType=VARCHAR},
      living_state = #{livingState,jdbcType=VARCHAR},
      living_type = #{livingType,jdbcType=VARCHAR},
      registered_residence = #{registeredResidence,jdbcType=VARCHAR},
      arrive_date = #{arriveDate,jdbcType=TIMESTAMP},
      country = #{country,jdbcType=VARCHAR},
      nation = #{nation,jdbcType=VARCHAR},
      blood_type = #{bloodType,jdbcType=VARCHAR},
      rh = #{rh,jdbcType=VARCHAR},
      degree_education = #{degreeEducation,jdbcType=VARCHAR},
      occupation = #{occupation,jdbcType=VARCHAR},
      marriage_status = #{marriageStatus,jdbcType=VARCHAR},
      date_marriage = #{dateMarriage,jdbcType=TIMESTAMP},
      document_doctor = #{documentDoctor,jdbcType=VARCHAR},
      document_date = #{documentDate,jdbcType=TIMESTAMP},
      medical_costs = #{medicalCosts,jdbcType=DOUBLE},
      medical_card_number = #{medicalCardNumber,jdbcType=VARCHAR},
      low_insurance_car = #{lowInsuranceCar,jdbcType=VARCHAR},
      drug_allergy_history = #{drugAllergyHistory,jdbcType=VARCHAR},
      past_history = #{pastHistory,jdbcType=VARCHAR},
      mother_medical_history = #{motherMedicalHistory,jdbcType=VARCHAR},
      father_medical_history = #{fatherMedicalHistory,jdbcType=VARCHAR},
      children_medical_history = #{childrenMedicalHistory,jdbcType=VARCHAR},
      brother_medical_history = #{brotherMedicalHistory,jdbcType=VARCHAR},
      heredity_history = #{heredityHistory,jdbcType=VARCHAR},
      is_disability = #{isDisability,jdbcType=VARCHAR},
      disability_card = #{disabilityCard,jdbcType=VARCHAR},
      expose_history = #{exposeHistory,jdbcType=VARCHAR},
      operation_history = #{operationHistory,jdbcType=VARCHAR},
      trauma_history = #{traumaHistory,jdbcType=VARCHAR},
      blood_transfusion_history = #{bloodTransfusionHistory,jdbcType=VARCHAR},
      kitchen_exhaust = #{kitchenExhaust,jdbcType=VARCHAR},
      fuel_type = #{fuelType,jdbcType=VARCHAR},
      water = #{water,jdbcType=VARCHAR},
      toilet = #{toilet,jdbcType=VARCHAR},
      livestock = #{livestock,jdbcType=VARCHAR},
      remarks = #{remarks,jdbcType=VARCHAR},
      key_crowd_type = #{keyCrowdType,jdbcType=VARCHAR},
      province_code = #{provinceCode,jdbcType=VARCHAR},
      city_code = #{cityCode,jdbcType=VARCHAR},
      town_code = #{townCode,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      is_sign = #{isSign,jdbcType=VARCHAR},
      variable = #{variable,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  
  
  
  <select id="selectPersonDocumentListPage" parameterType="com.lifelight.api.vo.XlPersonDocumentVO" resultMap="BaseResultMap">
		select
			 pd.id, pd.manager_id, pd.name, pd.sex, pd.card_type, pd.card_num, pd.birthday, pd.mobile, 
			 pd.health_card, pd.document_id, 
		    pd.new_farmers_card, pd.medical_insurance_card, pd.residential_address, pd.permanent_address, 
		   pd.work_unit, pd.family_relations, pd.contacts_name, pd.contacts_mobile, pd.living_state, pd.living_type, 
		    pd.registered_residence, pd.arrive_date, pd.country, pd.nation, pd.blood_type, rh, pd.degree_education, 
		    pd.occupation, pd.marriage_status, pd.date_marriage, pd.document_doctor, pd.document_date, pd.medical_costs, 
		    pd.medical_card_number, pd.low_insurance_car, pd.drug_allergy_history, pd.past_history, pd.mother_medical_history, 
		    pd.father_medical_history, pd.children_medical_history, pd.brother_medical_history, pd.heredity_history, 
		    pd.is_disability, pd.disability_card, pd.expose_history, pd.operation_history, pd.trauma_history, 
		    pd.blood_transfusion_history, pd.kitchen_exhaust, pd.fuel_type, pd.water, pd.toilet, pd.livestock, 
		    pd.remarks, pd.key_crowd_type, pd.province_code, pd.city_code, pd.town_code, pd.create_time, 
		    pd.update_time, 
		    pd.is_sign,pd.variable
		from xl_person_document AS pd
		left join xl_person_contract pc on pd.id = pc.document_id and pc.in_use = 1
		where 1=1
		<if test="id != null">
			and pd.id = #{id,jdbcType=INTEGER}
		</if>
		<if test="isSign != null and isSign !=''">
			and pd.is_sign = #{isSign,jdbcType=VARCHAR}
		</if>
		<if test="documentDoctor != null and documentDoctor !=''">
			and pd.document_doctor = #{documentDoctor,jdbcType=VARCHAR}
		</if>
		<if test="name != null and name !=''">
			and pd.name like CONCAT(#{name,jdbcType=VARCHAR},'%')
		</if>
		<if test="documentId != null and documentId !=''">
			and pd.document_id like CONCAT(#{documentId,jdbcType=VARCHAR},'%')
		</if>
		<if test="cardNum != null and cardNum !=''">
			and pd.card_num like CONCAT(#{cardNum,jdbcType=VARCHAR},'%')
		</if>
		<if test="keyCrowdType != null and keyCrowdType !=''"><!-- 重点人群 -->
			and LOCATE(#{keyCrowdType,jdbcType=VARCHAR},key_crowd_type)>0
		</if>
		<if test="signStartTime != null and signStartTime !='' and  is_sign =='1' ">
			and pc.sign_start_date &gt;= #{signStartTime,jdbcType=VARCHAR}
		</if>
		<if test="signEndTime != null and signEndTime !='' and  is_sign =='1' ">
			and pc.sign_start_date &lt;= #{signEndTime,jdbcType=VARCHAR}
		</if>
		<if test="provinceCode != null and provinceCode !=''">
		    and pd.province_code = #{provinceCode,jdbcType=VARCHAR}
		</if>
		<if test="cityCode != null and cityCode !=''">
		    and pd.city_code = #{cityCode,jdbcType=VARCHAR}
		</if>
		<if test="townCode != null and townCode !=''">
		    and pd.town_code = #{townCode,jdbcType=VARCHAR}
		 </if> 
		<if test="platformId != null">
		    and pd.platform_id = #{platformId,jdbcType=INTEGER}
		 </if> 
		order by pd.create_time desc
	</select>
  <select id="selectDocument" parameterType="com.lifelight.api.entity.XlPersonDocument" resultMap="BaseResultMap">
		select
			<include refid="Base_Column_List" />
		from xl_person_document AS pd
		where 1=1
		<if test="id != null">
			and pd.id = #{id,jdbcType=INTEGER}
		</if>
		<if test="isSign != null and isSign !=''">
			and pd.is_sign = #{isSign,jdbcType=VARCHAR}
		</if>
		<if test="platformId != null">
			and pd.platform_id = #{platformId,jdbcType=INTEGER}
		</if>
		<if test="name != null and name !=''">
			and pd.name like CONCAT(#{name,jdbcType=VARCHAR},'%')
		</if>
		<if test="documentId != null and documentId !=''">
			and pd.document_id like CONCAT(#{documentId,jdbcType=VARCHAR},'%')
		</if>
		<if test="cardNum != null and cardNum !=''">
			and pd.card_num like CONCAT(#{cardNum,jdbcType=VARCHAR},'%')
		</if>
		<if test="keyCrowdType != null and keyCrowdType !=''">
			and LOCATE(#{keyCrowdType,jdbcType=VARCHAR},key_crowd_type)>0
		</if>
		order by pd.create_time desc
	</select>
	
	
	 <!-- 身份证查询 -->
    <select id="querySignUserByEntityCard" parameterType="com.lifelight.api.vo.XlPersonDocumentVO" resultType="com.lifelight.api.vo.ApiUserInfoVO">
		  SELECT 
		  da.manager_id AS managerId, u.open_id AS openId,u.parent_id, u.role_id, da.name, u.city,
		  IF (u.birthday IS NULL,da.birthday,u.birthday) AS birthday,
		  IF (u.sex IS NULL,da.sex,u.sex) AS sex,
		   u.image_url AS imageUrl, u.address, u.company, 
		   u.email, da.mobile, u.create_time, u.update_time, u.in_use AS inUse,u.height,da.card_num AS cardId
		    FROM user_doctor_rel r
			LEFT JOIN (
				SELECT d.`manager_id`,d.`mobile`,d.`birthday`,d.`card_num`,d.sex,d.name
				FROM xl_person_contract c LEFT JOIN xl_person_document d ON c.document_id = d.`id`
				WHERE c.`in_use` = 1
			)da ON r.manager_id = da.manager_id
		    LEFT JOIN api_user_info u ON r.manager_id = u.manager_id
		    WHERE r.in_use=1 and r.`build_type` = 1
		    <if test="cardNum !=null and cardNum !=''">
		       and  da.card_num = #{cardNum,jdbcType=VARCHAR}
		    </if> 
  </select>
  
  
  <!-- 用户管理  机构 医生通用 -->
  <select id="getAllUserByConditionListPage" parameterType="com.lifelight.api.vo.ApiContractedUserVO" resultType="com.lifelight.api.vo.ApiContractedUserVO">
   SELECT d4.* FROM (	
		SELECT d3.* FROM (
			<if test="buildType != null">
				<if test="buildType==1 or buildType==0">
		   			SELECT d1.*,b2.name AS doctorName,ro.`item_name` AS roleName,
					b1.`name` AS parentName,b1.mobile AS parentMobile
					,NULL AS diseaseIds
					FROM (
						SELECT da.id AS contractedId,
						r.manager_id AS managerId,
						da.`name` NAME,
						IF (a.mobile IS NULL,da.mobile,a.mobile) AS mobile,
						r.doctor_id AS doctorId,
						r.in_use AS inUse,
						IF (da.sex IS NULL,a.sex,da.sex) AS sex,
						r.create_time AS createTime,
						r.build_type AS buildType,
						IFNULL((YEAR(NOW())-YEAR(da.birthday)-1) + ( DATE_FORMAT(da.birthday, '%m%d') &lt;= DATE_FORMAT(NOW(), '%m%d')),-1) AS age,
						a.`parent_id` AS parentId,
						a.`role_id` AS roleId,
						da.key_crowd_type as keyCrowdType,
						da.service_package as servicePackage,
						da.sign_person_type as signPersonType
						FROM user_doctor_rel r
						LEFT JOIN (
							SELECT c.id,d.key_crowd_type,d.`manager_id`,d.`mobile`,d.`birthday`,d.`card_num`
							,d.sex,d.name,c.service_package,c.sign_person_type
							FROM xl_person_contract c LEFT JOIN xl_person_document d ON c.document_id = d.`id`
							WHERE c.`in_use` = 1
						)da ON r.contracted_user_id = da.id
						LEFT JOIN api_user_info a ON r.manager_id = a.manager_id
						WHERE r.`build_type` =1 and r.in_use = 1
					)d1 
					LEFT JOIN api_user_info b1 ON d1.parentId = b1.`manager_id`
					LEFT JOIN backstage_user_info b2 ON d1.doctorId = b2.manager_id
					LEFT JOIN api_role_info ro ON d1.roleId = ro.`id`
					WHERE 1=1 
					<!-- <if test="diseaseId != null and diseaseId !=''">
			       		AND uh.`type_id`='3'
				    </if>  -->
				    <if test="doctorIdList != null and doctorIdList !=''">
			        	and d1.doctorId in
			                <foreach item="item" index="index" collection="doctorIdList" 
			                         open="(" separator="," close=")">
			                        ${item}
			                </foreach>
			    	</if>
					<if test="keyCrowdType != null and keyCrowdType !=''">
			       		and LOCATE(#{keyCrowdType,jdbcType=VARCHAR},d1.keyCrowdType)>0
				    </if> 
					<if test="signPersonType != null and signPersonType !=''">
			       		and LOCATE(#{signPersonType,jdbcType=VARCHAR},d1.signPersonType)>0
				    </if> 
					<if test="servicePackage != null and servicePackage !=''">
			       		and d1.servicePackage = #{servicePackage,jdbcType=VARCHAR}
				    </if> 
				     <if test="ageBegin != null and ageBegin !=''">
			       		and d1.age &gt;= #{ageBegin,jdbcType=INTEGER}
				    </if>
				    <if test="ageEnd != null and ageEnd !=''">
				        and d1.age &lt;= #{ageEnd,jdbcType=INTEGER}
				    </if>
					 GROUP BY d1.contractedId
				 </if>
			</if>
			<if test="buildType != null and buildType==0">
				UNION
			</if>
			<if test="buildType != null">
				<if test="buildType==3 or buildType==0">
					SELECT d1.*,bu.name AS doctorName,ar.`item_name` AS roleName,
					au.`name` AS parentName,au.mobile AS parentMobile
					, NULL AS keyCrowdType,NULL AS diseaseIds,NULL AS servicePackage,NULL AS signPersonType
					 FROM (
						SELECT r.`contracted_user_id` AS contractedId,r.`manager_id` AS managerId,u.`name` AS NAME
						,a.`mobile` AS mobile,r.`doctor_id` AS doctorId,r.`in_use` AS in_use,a.`sex` AS sex,
						r.`create_time` AS createTime,r.`build_type` AS buildType,u.`age`,a.`parent_id` AS parentId,a.`role_id` AS roleId
						FROM user_doctor_rel r
						LEFT JOIN api_motherhood_user u ON r.`contracted_user_id` = u.`id`
						LEFT JOIN api_user_info a ON r.`manager_id` = a.`manager_id`
						WHERE r.`build_type` =3 and r.in_use = 1
					)d1
					LEFT JOIN api_user_info au ON d1.parentId = au.`manager_id`
					LEFT JOIN backstage_user_info bu ON d1.doctorId = bu.`manager_id`
					LEFT JOIN api_role_info ar ON d1.roleId = ar.`id`
					where 1=1
					 <if test="doctorIdList != null and doctorIdList !=''">
			        	and d1.doctorId in
			                <foreach item="item" index="index" collection="doctorIdList" 
			                         open="(" separator="," close=")">
			                        ${item}
			                </foreach>
			    	 </if>
					  <if test="ageBegin != null and ageBegin !=''">
			       		and d1.age &gt;= #{ageBegin,jdbcType=INTEGER}
				    </if>
				    <if test="ageEnd != null and ageEnd !=''">
				        and d1.age &lt;= #{ageEnd,jdbcType=INTEGER}
				    </if>
				 </if>
			 </if>
   			<if test="(ageBegin == null or ageBegin =='' or ageBegin=='-1')
   				and (servicePackage ==null or servicePackage =='') 
   				and (signPersonType ==null or signPersonType =='') 
   				and (startTime ==null or startTime =='') 
   				">
   				<if test="buildType != null and buildType==0">
				UNION
				</if>
				<if test="buildType != null">
					<if test="buildType==2 or buildType==0">
		   			SELECT d1.*,b2.name AS doctorName,ro.`item_name` AS roleName,
					b1.`name` AS parentName,b1.mobile AS parentMobile, NULL AS keyCrowdType,null AS diseaseIds
					,NULL AS servicePackage,NULL AS signPersonType
					FROM (
						SELECT null AS contractedId,
						r.manager_id AS managerId,
						a.name AS NAME,
						a.mobile AS mobile,r.doctor_id AS doctorId,
						r.in_use AS inUse,
						a.sex AS sex,
						r.create_time AS createTime,
						r.build_type AS buildType,
						IFNULL((YEAR(NOW())-YEAR(a.birthday)-1) + ( DATE_FORMAT(a.birthday, '%m%d') &lt;= DATE_FORMAT(NOW(), '%m%d')),-1) AS age,
						a.`parent_id` AS parentId,
						a.`role_id` AS roleId
						FROM user_doctor_rel r
						LEFT JOIN api_user_info a ON r.manager_id = a.manager_id
						where r.build_type ='2' and r.in_use = 1
					)d1 
					LEFT JOIN api_user_info b1 ON d1.parentId = b1.`manager_id`
					LEFT JOIN backstage_user_info b2 ON d1.doctorId = b2.manager_id
					LEFT JOIN api_role_info ro ON d1.roleId = ro.`id`
					WHERE 1=1 AND d1.buildType ='2'
					 <if test="doctorIdList != null and doctorIdList !=''">
			        	and d1.doctorId in
			                <foreach item="item" index="index" collection="doctorIdList" 
			                         open="(" separator="," close=")">
			                        ${item}
			                </foreach>
			    	 </if>
			    	</if>
			    </if>
	   			<if test="buildType != null and buildType==0">
				UNION
				</if>
				<if test="buildType != null">
					<if test="buildType==4 or buildType==0">
						SELECT d2.*,ro2.`item_name` AS roleName,b3.`name` AS parentName,
						b3.mobile AS parentMobile , NULL AS keyCrowdType,null AS diseaseIds
						,NULL AS servicePackage,NULL AS signPersonType
						FROM 
						(
							SELECT NULL AS contractedId,o.`user_id` AS managerId,
							u.name AS NAME,u.mobile AS mobile,o.`back_manager_id` AS doctorId,o.`in_use` AS inUse,
							u.`sex` AS sex,o.`create_time` AS createTime,4 AS buildType,
							-1 AS age,
							u.`parent_id` AS parentId,u.`role_id` AS roleId,b.name AS doctorName
							FROM order_info o 
							LEFT JOIN api_user_info u ON o.`user_id` = u.`manager_id`
							LEFT JOIN backstage_user_info b ON o.`back_manager_id` = b.`manager_id`
							WHERE 1=1 AND o.back_manager_id IS NOT NULL
							GROUP BY o.user_id,o.back_manager_id  ORDER BY o.create_time ASC
						)d2
						LEFT JOIN api_user_info b3 ON d2.parentId = b3.`manager_id`
						LEFT JOIN api_role_info ro2 ON d2.roleId = ro2.`id`
						where 1=1
						 <if test="doctorIdList != null and doctorIdList !=''">
					        and d2.doctorId in
					                <foreach item="item" index="index" collection="doctorIdList" 
					                         open="(" separator="," close=")">
					                        ${item}
					                </foreach>
					     </if>
				    </if>
			    </if>
   			</if>
   			)d3 
   		 <where>
    	1=1
	    <if test="name != null and name !=''">
	        and d3.name like #{name,jdbcType=VARCHAR}
	    </if>
	    <if test="mobile != null and mobile !=''">
	        and d3.mobile = #{mobile,jdbcType=VARCHAR}
	      </if>
	    <if test="inUse != null and inUse !=''">
	    	<if test="inUse ==1">
	    		and (d3.buildType='1' or d3.buildType='3')
	    	</if>
	    	<if test="inUse==0">
	    		and d3.buildType='2' or d3.buildType='4'
	    	</if>
	    </if>
	     <if test="startTime != null and startTime !=''">
		  AND 	DATE_FORMAT(d3.createTime, '%Y-%m-%d')  &gt;=  DATE_FORMAT(#{startTime,jdbcType=VARCHAR}, '%Y-%m-%d') 
		  </if>
		  <if test="endTime != null and endTime !=''">
		  	and DATE_FORMAT(d3.createTime, '%Y-%m-%d') &lt;=  DATE_FORMAT(#{endTime,jdbcType=VARCHAR}, '%Y-%m-%d')
		  </if>
	  </where>
	 )d4
	WHERE 1=1
	GROUP BY d4.managerId
	ORDER BY d4.createTime DESC
   
  </select>
</mapper>